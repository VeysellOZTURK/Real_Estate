<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAANQAAAGUAAAB2AAAAdwAA
        AHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB2AAAAZQAA
        ADUAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAKcAAADkAAAA1gAA
        AMkAAADJAAAAyQAAAMkAAADJAAAAyQAAAMkAAADJAAAAyQAAAMkAAADJAAAAyQAAAMkAAADJAAAAyQAA
        AMkAAADWAAAA5AAAAKcAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkAAADMAAAAxQAA
        AEwAAAAWAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADAAAAAwAAAANAAAADQAAAA0AAAANAAAADQAA
        AA0AAAANAAAADQAAABYAAABMAAAAxQAAAMwAAAApAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAApgAA
        AMQAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAxAAAAKYAAAAHAAAAAAAAAAAAAAAAAAAAAAAA
        ADUAAADjAAAATQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAYQAAAJkAAACYAAAAUAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNAAAA4wAAADUAAAAAAAAAAAAA
        AAAAAAAAAAAAZQAAANUAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLAAAA/wAA
        AP8AAACwAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcAAADWAAAAZAAA
        AAAAAAAAAAAAAAAAAAAAAAB2AAAAyQAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAALgAA
        AKEAAAD/AAAA/wAAAOkAAACEAAAAPwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAA
        AMkAAAB2AAAAAAAAAAAAAAAAAAAAAAAAAHcAAADJAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAA
        AJMAAADqAAAA/wAAAP8AAAD/AAAA/wAAAP8AAADyAAAAmwAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAMAAAAyQAAAHcAAAAAAAAAAAAAAAAAAAAAAAAAdwAAAMkAAAAMAAAAAAAAAAAAAAAAAAAAAAAA
        AB8AAAC9AAAA/wAAAP8AAAD9AAAA7wAAAOEAAADpAAAA/AAAAP8AAAD/AAAAlwAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAwAAADJAAAAdwAAAAAAAAAAAAAAAAAAAAAAAAB3AAAAyQAAAAwAAAAAAAAAAAAA
        AAAAAAAAAAAANAAAANoAAAD/AAAA0wAAAG8AAAAzAAAAIAAAACkAAACLAAAA+wAAAP8AAADrAAAAMwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAMkAAAB3AAAAAAAAAAAAAAAAAAAAAAAAAHcAAADJAAAADAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAMgAAAIgAAAAoAAAAAAAAAAAAAAAAAAAAAAAAACQAAADjAAAA/wAA
        AP4AAABdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAyQAAAHcAAAAAAAAAAAAAAAAAAAAAAAAAdwAA
        AMkAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAaQAA
        APYAAAD/AAAA/gAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAADJAAAAdwAAAAAAAAAAAAAAAAAA
        AAAAAAB3AAAAyQAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAVAAA
        AK8AAAD0AAAA/wAAAP8AAADpAAAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAMkAAAB3AAAAAAAA
        AAAAAAAAAAAAAAAAAHcAAADJAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAXAAA
        AMcAAAD5AAAA/wAAAP8AAAD/AAAA/AAAAIgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAyQAA
        AHcAAAAAAAAAAAAAAAAAAAAAAAAAdwAAAMkAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAA
        AIQAAAD3AAAA/wAAAP8AAAD/AAAA/wAAAOUAAAB+AAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAwAAADJAAAAdwAAAAAAAAAAAAAAAAAAAAAAAAB3AAAAyQAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABGAAAA8gAAAP8AAAD/AAAA8QAAALgAAAB0AAAALAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAADAAAAMkAAAB3AAAAAAAAAAAAAAAAAAAAAAAAAHcAAADJAAAADAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAIYAAAD/AAAA/wAAAN0AAABMAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAMAAAAyQAAAHcAAAAAAAAAAAAAAAAAAAAAAAAAdwAAAMkAAAAMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAkwAAAP8AAAD/AAAAnQAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAagAA
        ACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAADJAAAAdwAAAAAAAAAAAAAAAAAAAAAAAAB3AAAAyQAA
        AAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAA/wAAAP8AAADZAAAATgAAACsAAABEAAAAggAA
        ANMAAAD+AAAAvwAAACEAAAAAAAAAAAAAAAAAAAAAAAAADAAAAMkAAAB3AAAAAAAAAAAAAAAAAAAAAAAA
        AHcAAADJAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYAAADYAAAA/wAAAP8AAAD2AAAA6wAA
        APYAAAD/AAAA/wAAAP8AAADUAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAyQAAAHcAAAAAAAAAAAAA
        AAAAAAAAAAAAdwAAAMkAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsAAADYAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD+AAAAogAAACUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAADJAAAAdwAA
        AAAAAAAAAAAAAAAAAAAAAAB2AAAAyQAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACQAAAByAAAAngAAAKgAAADrAAAA/wAAAP0AAABbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAA
        AMkAAAB2AAAAAAAAAAAAAAAAAAAAAAAAAGUAAADVAAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAALAAAAD/AAAA/wAAAI0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAXAAAA1gAAAGQAAAAAAAAAAAAAAAAAAAAAAAAANgAAAOMAAABNAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAJcAAACYAAAAYAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAE0AAADjAAAANQAAAAAAAAAAAAAAAAAAAAAAAAAHAAAApwAAAMMAAAAeAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAeAAAAwwAAAKYAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApAAAAzAAA
        AMUAAABMAAAAFgAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAAMAAAADAAA
        AA0AAAANAAAADQAAAA0AAAAWAAAATAAAAMUAAADMAAAAKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAApAAAApwAAAOQAAADWAAAAyQAAAMkAAADJAAAAyQAAAMkAAADJAAAAyQAAAMkAAADJAAAAyQAA
        AMkAAADJAAAAyQAAAMkAAADJAAAAyQAAANYAAADkAAAApwAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAIAAAANQAAAGUAAAB2AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAA
        AHcAAAB3AAAAdwAAAHcAAAB3AAAAdwAAAHcAAAB2AAAAZQAAADUAAAAIAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////4AAAf8AAAD+AAAAfD///Dx/B/48f4P+PH4A/jx8AH48eA
        A+PHgAPjx8eD48fvA+PH/APjx/AD48fgB+PH4A/jx+B/48fh4+PH4AHjx+AB48fwA+PH+Afjx/8H48f/
        g+PD///D4AAAB/AAAA/4AAAf//////////8=
</value>
  </data>
</root>